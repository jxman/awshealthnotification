name: "Terraform CI/CD"

on:
  push:
    branches:
      - main
      - "feature/dev-*"
    paths:
      - "environments/**"
      - "modules/**"
      - ".github/workflows/**"
  pull_request:
    branches:
      - main
      - "feature/dev-*"
    paths:
      - "environments/**"
      - "modules/**"
      - ".github/workflows/**"
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Select environment"
        options:
          - prod
          - dev
        required: true
        default: "dev"

permissions:
  contents: read
  pull-requests: write
  id-token: write

env:
  TF_VERSION: "1.7.0"
  AWS_REGION: "us-east-1"

jobs:
  plan:
    name: "Terraform Plan"
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Environment
        id: setenv
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == *"feature/dev-"* ]]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          fi

      - name: Verify Environment Directory
        run: |
          if [ ! -d "environments/${{ env.ENVIRONMENT }}" ]; then
            echo "Environment directory 'environments/${{ env.ENVIRONMENT }}' not found"
            exit 1
          fi

      - name: Check Required Files
        run: |
          cd "environments/${{ env.ENVIRONMENT }}"
          if [ ! -f "main.tf" ]; then
            echo "main.tf not found in environments/${{ env.ENVIRONMENT }}"
            exit 1
          fi
          if [ ! -f "variables.tf" ]; then
            echo "variables.tf not found in environments/${{ env.ENVIRONMENT }}"
            exit 1
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create backend config
        working-directory: environments/${{ env.ENVIRONMENT }}
        run: |
          mkdir -p ../../backend
          cat > ../../backend/${{ env.ENVIRONMENT }}.hcl << EOF
          bucket         = "${{ secrets.TF_STATE_BUCKET }}"
          key            = "health-notifications/${{ env.ENVIRONMENT }}/terraform.tfstate"
          region         = "${{ env.AWS_REGION }}"
          dynamodb_table = "${{ secrets.TF_STATE_LOCK_TABLE }}"
          encrypt        = true
          EOF

      - name: Create tfvars file
        working-directory: environments/${{ env.ENVIRONMENT }}
        run: |
          cat > terraform.tfvars << EOF
          aws_region                     = "${{ env.AWS_REGION }}"
          environment                    = "${{ env.ENVIRONMENT }}"
          email_addresses                = ${{ secrets.NOTIFICATION_EMAILS }}
          terraform_state_bucket         = "${{ secrets.TF_STATE_BUCKET }}"
          terraform_state_key            = "health-notifications/${{ env.ENVIRONMENT }}/terraform.tfstate"
          terraform_state_dynamodb_table = "${{ secrets.TF_STATE_LOCK_TABLE }}"
          EOF

      - name: Terraform Format
        id: fmt
        working-directory: environments/${{ env.ENVIRONMENT }}
        run: terraform fmt -check -recursive ../..
        continue-on-error: true

      - name: Terraform Init
        id: init
        working-directory: environments/${{ env.ENVIRONMENT }}
        run: terraform init -backend-config=../../backend/${{ env.ENVIRONMENT }}.hcl

      - name: Terraform Validate
        id: validate
        working-directory: environments/${{ env.ENVIRONMENT }}
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: environments/${{ env.ENVIRONMENT }}
        run: |
          terraform plan -input=false -no-color -out=plan.tfplan
          terraform show -no-color plan.tfplan > plan.txt

          echo "Checking files after plan:"
          ls -la

          echo "PLAN<<EOF" >> $GITHUB_ENV
          cat plan.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ env.ENVIRONMENT }}
          path: |
            environments/${{ env.ENVIRONMENT }}/plan.tfplan
            environments/${{ env.ENVIRONMENT }}/plan.txt
          retention-days: 1

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ env.PLAN }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ
            <details><summary>Show Plan</summary>

            \`\`\`hcl
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: output
            })

  apply:
    name: "Terraform Apply"
    needs: plan
    runs-on: ubuntu-22.04
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || (contains(github.ref, 'feature/dev-') && 'dev' || 'prod') }}
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (contains(github.ref, 'feature/dev-') && github.event_name == 'push')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Environment
        id: setenv
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == *"feature/dev-"* ]]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create backend config
        working-directory: environments/${{ env.ENVIRONMENT }}
        run: |
          mkdir -p ../../backend
          cat > ../../backend/${{ env.ENVIRONMENT }}.hcl << EOF
          bucket         = "${{ secrets.TF_STATE_BUCKET }}"
          key            = "health-notifications/${{ env.ENVIRONMENT }}/terraform.tfstate"
          region         = "${{ env.AWS_REGION }}"
          dynamodb_table = "${{ secrets.TF_STATE_LOCK_TABLE }}"
          encrypt        = true
          EOF

      - name: Create tfvars file
        working-directory: environments/${{ env.ENVIRONMENT }}
        run: |
          cat > terraform.tfvars << EOF
          aws_region                     = "${{ env.AWS_REGION }}"
          environment                    = "${{ env.ENVIRONMENT }}"
          email_addresses                = ${{ secrets.NOTIFICATION_EMAILS }}
          terraform_state_bucket         = "${{ secrets.TF_STATE_BUCKET }}"
          terraform_state_key            = "health-notifications/${{ env.ENVIRONMENT }}/terraform.tfstate"
          terraform_state_dynamodb_table = "${{ secrets.TF_STATE_LOCK_TABLE }}"
          EOF

      - name: Terraform Init
        working-directory: environments/${{ env.ENVIRONMENT }}
        run: terraform init -backend-config=../../backend/${{ env.ENVIRONMENT }}.hcl

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ env.ENVIRONMENT }}
          path: environments/${{ env.ENVIRONMENT }}

      - name: Verify Plan File
        working-directory: environments/${{ env.ENVIRONMENT }}
        run: |
          if [ ! -f "plan.tfplan" ]; then
            echo "Terraform plan file not found"
            exit 1
          fi

      - name: Terraform Apply
        working-directory: environments/${{ env.ENVIRONMENT }}
        run: terraform apply -auto-approve plan.tfplan
